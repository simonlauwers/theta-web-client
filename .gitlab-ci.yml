image: docker:latest
services:
  - docker:dind

variables:
  CONTAINER_NAME: eu.gcr.io/ip2-test/web-client

stages:
  - get-version
  - package
  - push
  - deploy-staging
  - deploy-production

get-version:
  stage: get-version
  image: node
  script:
    - node -p -e "require('./package.json').version" > version.txt
  artifacts:
    paths:
      - version.txt
    expire_in: 1 week

docker-build:
  stage: package
  script:
    - CONTAINER="$(echo $CONTAINER_NAME):$(cat version.txt)"
    - echo $CONTAINER
    - docker build -t $(echo $CONTAINER) .
    - docker save -o image.tar $(echo $CONTAINER)
  artifacts:
    paths:
      - image.tar
    expire_in: 1 week

docker-push:
  stage: push
  before_script:
    - base64 -d $GCP_SA_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io
  script:
    - CONTAINER="$(echo $CONTAINER_NAME):$(cat version.txt)"
    - docker load -i image.tar
    - docker push $(echo $CONTAINER)

gcloud-deploy-staging:
  stage: deploy-staging
  image: google/cloud-sdk
  only:
    - staging
  script:
    - CONTAINER="$(echo $CONTAINER_NAME):$(cat version.txt)"
    - base64 -d $GCP_SA_KEY > ~/encoded_serviceaccount.json
    - gcloud auth activate-service-account --key-file ~/encoded_serviceaccount.json
    - gcloud config set project ip2-test
    - chmod +x ./update-deployment.sh
    - echo $CONTAINER
    - ./update-deployment.sh $CONTAINER staging

gcloud-deploy-production:
  stage: deploy-production
  image: google/cloud-sdk
  only:
    - main
  script:
    - CONTAINER="$(echo $CONTAINER_NAME):$(cat version.txt)"
    - base64 -d $GCP_SA_KEY > ~/encoded_serviceaccount.json
    - gcloud auth activate-service-account --key-file ~/encoded_serviceaccount.json
    - gcloud config set project ip2-test
    - chmod +x ./update-deployment.sh
    - echo $CONTAINER
    - ./update-deployment.sh $CONTAINER production

